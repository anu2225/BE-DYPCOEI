Design 8-Queens matrix having first Queen placed. Use backtracking to place remaining Queens 
generate the final 8-queenâ€™s matrix. # Define the size of the board N = 8

# Function to print the board
def print_board(board):
    for row in board:
        print(" ".join(str(x) for x in row))
    print()

# Function to check if it's safe to place a Queen at board[row][col]
def is_safe(board, row, col):
    # Check the row to the left
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

# Function to solve the N-Queens problem using backtracking
def solve_queens(board, col):
    # Base case: if all Queens are placed, return True
    if col >= N:
        return True

    # Place Queen in all rows one by one in the current column
    for i in range(N):
        if is_safe(board, i, col):
            # Place the Queen
            board[i][col] = 1

            # Recur to place the rest of the Queens
            if solve_queens(board, col + 1):
                return True

            # Backtrack if placing Queen doesn't lead to a solution
            board[i][col] = 0

    return False

# Initialize the board with 0's
board = [[0 for _ in range(N)] for _ in range(N)]

# Place the first Queen in the first row
board[0][0] = 1

# Try to solve the problem starting from the second column
if solve_queens(board, 1):
    print("Solution:")
    print_board(board)
else:
    print("No solution found.")
